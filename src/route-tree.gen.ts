/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as ErrorImport } from './pages/error'
import { Route as IndexImport } from './pages/index'
import { Route as WorkshopsIndexImport } from './pages/workshops/index'
import { Route as TemplatesIndexImport } from './pages/templates/index'
import { Route as LoginIndexImport } from './pages/login/index'
import { Route as LibraryIndexImport } from './pages/library/index'
import { Route as EventsIndexImport } from './pages/events/index'
import { Route as WorkshopsLayoutImport } from './pages/workshops/layout'
import { Route as TemplatesLayoutImport } from './pages/templates/layout'
import { Route as LoginMessagesImport } from './pages/login/messages'
import { Route as LibraryLayoutImport } from './pages/library/layout'
import { Route as EventsCreateIndexImport } from './pages/events/create/index'
import { Route as EventsEventIdIndexImport } from './pages/events/$eventId/index'
import { Route as EventSessionEventIdIndexImport } from './pages/event-session/$eventId/index'
import { Route as EnrollEventIdIndexImport } from './pages/enroll/$eventId/index'
import { Route as EventsEventIdLayoutImport } from './pages/events/$eventId/layout'
import { Route as EventSessionEventIdLayoutImport } from './pages/event-session/$eventId/layout'

// Create/Update Routes

const ErrorRoute = ErrorImport.update({
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkshopsIndexRoute = WorkshopsIndexImport.update({
  path: '/workshops/',
  getParentRoute: () => rootRoute,
} as any)

const TemplatesIndexRoute = TemplatesIndexImport.update({
  path: '/templates/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const LibraryIndexRoute = LibraryIndexImport.update({
  path: '/library/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const WorkshopsLayoutRoute = WorkshopsLayoutImport.update({
  path: '/workshops/layout',
  getParentRoute: () => rootRoute,
} as any)

const TemplatesLayoutRoute = TemplatesLayoutImport.update({
  path: '/templates/layout',
  getParentRoute: () => rootRoute,
} as any)

const LoginMessagesRoute = LoginMessagesImport.update({
  path: '/login/messages',
  getParentRoute: () => rootRoute,
} as any)

const LibraryLayoutRoute = LibraryLayoutImport.update({
  path: '/library/layout',
  getParentRoute: () => rootRoute,
} as any)

const EventsCreateIndexRoute = EventsCreateIndexImport.update({
  path: '/events/create/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdIndexRoute = EventsEventIdIndexImport.update({
  path: '/events/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

const EventSessionEventIdIndexRoute = EventSessionEventIdIndexImport.update({
  path: '/event-session/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

const EnrollEventIdIndexRoute = EnrollEventIdIndexImport.update({
  path: '/enroll/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdLayoutRoute = EventsEventIdLayoutImport.update({
  path: '/events/$eventId/layout',
  getParentRoute: () => rootRoute,
} as any)

const EventSessionEventIdLayoutRoute = EventSessionEventIdLayoutImport.update({
  path: '/event-session/$eventId/layout',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/library/layout': {
      id: '/library/layout'
      path: '/library/layout'
      fullPath: '/library/layout'
      preLoaderRoute: typeof LibraryLayoutImport
      parentRoute: typeof rootRoute
    }
    '/login/messages': {
      id: '/login/messages'
      path: '/login/messages'
      fullPath: '/login/messages'
      preLoaderRoute: typeof LoginMessagesImport
      parentRoute: typeof rootRoute
    }
    '/templates/layout': {
      id: '/templates/layout'
      path: '/templates/layout'
      fullPath: '/templates/layout'
      preLoaderRoute: typeof TemplatesLayoutImport
      parentRoute: typeof rootRoute
    }
    '/workshops/layout': {
      id: '/workshops/layout'
      path: '/workshops/layout'
      fullPath: '/workshops/layout'
      preLoaderRoute: typeof WorkshopsLayoutImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
    '/library/': {
      id: '/library/'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexImport
      parentRoute: typeof rootRoute
    }
    '/workshops/': {
      id: '/workshops/'
      path: '/workshops'
      fullPath: '/workshops'
      preLoaderRoute: typeof WorkshopsIndexImport
      parentRoute: typeof rootRoute
    }
    '/event-session/$eventId/layout': {
      id: '/event-session/$eventId/layout'
      path: '/event-session/$eventId/layout'
      fullPath: '/event-session/$eventId/layout'
      preLoaderRoute: typeof EventSessionEventIdLayoutImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/layout': {
      id: '/events/$eventId/layout'
      path: '/events/$eventId/layout'
      fullPath: '/events/$eventId/layout'
      preLoaderRoute: typeof EventsEventIdLayoutImport
      parentRoute: typeof rootRoute
    }
    '/enroll/$eventId/': {
      id: '/enroll/$eventId/'
      path: '/enroll/$eventId'
      fullPath: '/enroll/$eventId'
      preLoaderRoute: typeof EnrollEventIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/event-session/$eventId/': {
      id: '/event-session/$eventId/'
      path: '/event-session/$eventId'
      fullPath: '/event-session/$eventId'
      preLoaderRoute: typeof EventSessionEventIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/': {
      id: '/events/$eventId/'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/create/': {
      id: '/events/create/'
      path: '/events/create'
      fullPath: '/events/create'
      preLoaderRoute: typeof EventsCreateIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  ErrorRoute,
  LibraryLayoutRoute,
  LoginMessagesRoute,
  TemplatesLayoutRoute,
  WorkshopsLayoutRoute,
  EventsIndexRoute,
  LibraryIndexRoute,
  LoginIndexRoute,
  TemplatesIndexRoute,
  WorkshopsIndexRoute,
  EventSessionEventIdLayoutRoute,
  EventsEventIdLayoutRoute,
  EnrollEventIdIndexRoute,
  EventSessionEventIdIndexRoute,
  EventsEventIdIndexRoute,
  EventsCreateIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/error",
        "/library/layout",
        "/login/messages",
        "/templates/layout",
        "/workshops/layout",
        "/events/",
        "/library/",
        "/login/",
        "/templates/",
        "/workshops/",
        "/event-session/$eventId/layout",
        "/events/$eventId/layout",
        "/enroll/$eventId/",
        "/event-session/$eventId/",
        "/events/$eventId/",
        "/events/create/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/library/layout": {
      "filePath": "library/layout.tsx"
    },
    "/login/messages": {
      "filePath": "login/messages.tsx"
    },
    "/templates/layout": {
      "filePath": "templates/layout.tsx"
    },
    "/workshops/layout": {
      "filePath": "workshops/layout.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/library/": {
      "filePath": "library/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/templates/": {
      "filePath": "templates/index.tsx"
    },
    "/workshops/": {
      "filePath": "workshops/index.tsx"
    },
    "/event-session/$eventId/layout": {
      "filePath": "event-session/$eventId/layout.tsx"
    },
    "/events/$eventId/layout": {
      "filePath": "events/$eventId/layout.tsx"
    },
    "/enroll/$eventId/": {
      "filePath": "enroll/$eventId/index.tsx"
    },
    "/event-session/$eventId/": {
      "filePath": "event-session/$eventId/index.tsx"
    },
    "/events/$eventId/": {
      "filePath": "events/$eventId/index.tsx"
    },
    "/events/create/": {
      "filePath": "events/create/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
